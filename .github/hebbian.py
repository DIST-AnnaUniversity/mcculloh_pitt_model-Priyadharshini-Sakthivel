{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(8, shape=(), dtype=int32)\n"
     ]
    }
   ],
   "source": [
    "#Simple operation to illustrate constant and variable\n",
    "import tensorflow as tf\n",
    "x = tf.constant(2)\n",
    "y = tf.Variable(x+4)\n",
    "#type(x)\n",
    "#print(x)\n",
    "total=x+y\n",
    "#type(total)\n",
    "print(total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2 5 7]\n",
      "Dimension  1\n",
      "Shape  (3,)\n",
      "[[2 5 7]\n",
      " [3 6 8]]\n",
      "Dimension  2\n",
      "Shape  (2, 3)\n",
      "[[[ 1  3  5  6]\n",
      "  [ 2  4  6  7]\n",
      "  [ 1  2  3  4]]\n",
      "\n",
      " [[ 4  3  2  1]\n",
      "  [ 7  9 11 12]\n",
      "  [ 8 10 12  9]]]\n",
      "Dimension  3\n",
      "Shape  (2, 3, 4)\n"
     ]
    }
   ],
   "source": [
    "#tensor demo\n",
    "#1D\n",
    "import numpy as np\n",
    "x = np.array([2,5,7])\n",
    "print(x)\n",
    "print(\"Dimension \", x.ndim)\n",
    "print(\"Shape \", x.shape)\n",
    "\n",
    "y = np.array([[2,5,7],[3,6,8]])\n",
    "print(y)\n",
    "print(\"Dimension \", y.ndim)\n",
    "print(\"Shape \", y.shape)\n",
    "\n",
    "z = np.array([[[1,3,5,6],[2,4,6,7],[1,2,3,4]],[[4,3,2,1],[7,9,11,12],[8,10,12,9]]])\n",
    "print(z)\n",
    "print(\"Dimension \", z.ndim)\n",
    "print(\"Shape \", z.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inputs [[ 1.  -2.   1.5  0. ]\n",
      " [ 0.   1.5 -0.5 -1. ]\n",
      " [-1.   1.   0.5 -1. ]]\n",
      "initial weights [1, -1, 0, 0.5]\n",
      "Training\n",
      "------------\n",
      "------------\n",
      "input x [ 1.  -2.   1.5  0. ]\n",
      "1 0 [ 2.  -3.   1.5  0.5]\n",
      "output 1\n",
      "------------\n",
      "------------\n",
      "input x [ 0.   1.5 -0.5 -1. ]\n",
      "1 1 [ 2.  -4.5  2.   1.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [-1.   1.   0.5 -1. ]\n",
      "1 2 [ 3.  -5.5  1.5  2.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [ 1.  -2.   1.5  0. ]\n",
      "2 0 [ 4.  -7.5  3.   2.5]\n",
      "output 1\n",
      "------------\n",
      "------------\n",
      "input x [ 0.   1.5 -0.5 -1. ]\n",
      "2 1 [ 4.  -9.   3.5  3.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [-1.   1.   0.5 -1. ]\n",
      "2 2 [  5.  -10.    3.    4.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [ 1.  -2.   1.5  0. ]\n",
      "3 0 [  6.  -12.    4.5   4.5]\n",
      "output 1\n",
      "------------\n",
      "------------\n",
      "input x [ 0.   1.5 -0.5 -1. ]\n",
      "3 1 [  6.  -13.5   5.    5.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [-1.   1.   0.5 -1. ]\n",
      "3 2 [  7.  -14.5   4.5   6.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [ 1.  -2.   1.5  0. ]\n",
      "4 0 [  8.  -16.5   6.    6.5]\n",
      "output 1\n",
      "------------\n",
      "------------\n",
      "input x [ 0.   1.5 -0.5 -1. ]\n",
      "4 1 [  8.  -18.    6.5   7.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [-1.   1.   0.5 -1. ]\n",
      "4 2 [  9.  -19.    6.    8.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [ 1.  -2.   1.5  0. ]\n",
      "5 0 [ 10.  -21.    7.5   8.5]\n",
      "output 1\n",
      "------------\n",
      "------------\n",
      "input x [ 0.   1.5 -0.5 -1. ]\n",
      "5 1 [ 10.  -22.5   8.    9.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [-1.   1.   0.5 -1. ]\n",
      "5 2 [ 11.  -23.5   7.5  10.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [ 1.  -2.   1.5  0. ]\n",
      "6 0 [ 12.  -25.5   9.   10.5]\n",
      "output 1\n",
      "------------\n",
      "------------\n",
      "input x [ 0.   1.5 -0.5 -1. ]\n",
      "6 1 [ 12.  -27.    9.5  11.5]\n",
      "output -1\n",
      "------------\n",
      "------------\n",
      "input x [-1.   1.   0.5 -1. ]\n",
      "6 2 [ 13.  -28.    9.   12.5]\n",
      "output -1\n",
      "------------\n",
      "Final sets of weights [ 13.  -28.    9.   12.5]\n"
     ]
    }
   ],
   "source": [
    "#This is a toy problem explaining Hebbian Learning\n",
    "#This is an unsupervised Learning\n",
    "import numpy as np\n",
    "X = np.array([[1,-2,1.5,0],[0,1.5,-0.5,-1],[-1,1,0.5,-1],])\n",
    "print (\"Inputs\", X)\n",
    "w = ([1,-1,0,0.5])\n",
    "print (\"initial weights\", w)\n",
    "iterations = 7\n",
    "alpha = 1\n",
    "print (\"Training\")\n",
    "print (\"------------\")\n",
    "for n in range(1,iterations):\n",
    "    for i, x in enumerate(X):\n",
    "        net = np.dot(X[i],w)\n",
    "        if net >0:\n",
    "            out = 1\n",
    "        else:\n",
    "            out = -1\n",
    "        delta_w = (alpha)*(out)*x\n",
    "        w = w + delta_w\n",
    "        print (\"------------\")\n",
    "        print (\"input x\",x)\n",
    "        print (n, i, w)\n",
    "        print (\"output\",out)\n",
    "        print (\"------------\")\n",
    "print (\"Final sets of weights\", w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
